import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.concurrent.ThreadLocalRandom;

public class ServerThread implements Runnable {

	private Socket s;
	private DataInputStream ins;
	private DataOutputStream out;
	private String name;
	static boolean finish = false;

	public ServerThread(Socket s, String name) {
		this.s = s;
		this.name = name;
	}

	@Override
	public void run() {
		try {
			ins = new DataInputStream(s.getInputStream());
			out = new DataOutputStream(s.getOutputStream());
			//Send game start signal to client
			out.writeUTF("start");
			String anouname = "Players in this round: ";
			// Get the names of all clients in this round and send to clients
			for (int i = 0; i < Server.round.size(); i++) {
				anouname = anouname + Server.round.get(i).getName() + ", ";
			}
			out.writeUTF(anouname);
			Integer num = Server.num;
			int times = 0;
			//Let client to guess until client already guess four times
			while (times < 4) {
				//Get the number client guessed
				String g = ins.readUTF();
				//If receive single letter e from client, exit the game, close socket and finish current thread, set score to -1
				if (g.equals("e")) {
					//Add client info to log when client disconnect to server
					Server.savecomlog(s.getInetAddress()+":"+s.getPort()+"   Disconnected"+'\n');
					s.close();
					times = -1;
					Thread.currentThread().interrupt();
					break;
				} else {
					try {
						int guess = Integer.parseInt(g);
						//Compare the number from client and the number generated by server, then send result to client
						if (guess < num) {
							out.writeUTF("The number you guess is too small");
							times++;
						}
						if (guess > num) {
							out.writeUTF("The number you guess is too big");
							times++;
						}
						//If client success guess the number, send congratulation to client
						if (guess == num) {
							times++;
							out.writeUTF("Congratulation");
							break;
						}
					} catch (NumberFormatException r) {
						out.writeUTF("Invalid number");
						times++;
					}
				}
			}
			//If the client's attempt reaches 4, send to correct number to client
			if (times >= 4) {
				out.writeUTF(num.toString());
			}
			//Record client name and number of guess
			Server.rank.add(new rankitem(name, times));
			//Waiting for other clients to finish the round
			while (!Server.roundfinish) {
				out.writeUTF("no");
			}
			//If all the clients in this round finish or exit the game, notify client this round is finish
			out.writeUTF("finish");
			//Send ranking result to client
			out.writeUTF(Server.ranking);
			//Get whether client wants to continue or finish the game
			String choose = ins.readUTF();
			//If client wants to play again, put client to the end of the queue
			if (choose.equals("p")) {
				Thread t = new Thread(new ServerThread(s, name));
				t.setName(name);
				Server.list.add(t);
			} else {
				//If client wants to finish the game
				try {
					//Add client info to log when client disconnect to server
					Server.savecomlog(s.getInetAddress()+":"+s.getPort()+"   Disconnected"+'\n');
					s.close();
					Thread.currentThread().interrupt();
				} catch (IOException e) {

				}
			}
		} catch (IOException e) {

		} finally {
			//Remove current client thread from round list if the user wish to continue the game
			if (!s.isClosed()) {
				Server.round.remove(Thread.currentThread());
				Thread.currentThread().interrupt();
				Server.judge2();
			}
			//If user wants to exit game or timeout
			else if(Server.round.size()==0) {
				Server.isstart=false;
				Server.judge();
			}
		}

	}
}
